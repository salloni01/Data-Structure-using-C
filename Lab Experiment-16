// Binary tree using linked list
#include <stdio.h>
#include<stdlib.h>
struct TreeNode{
    struct TreeNode* left;
    int data;
    struct TreeNode* right;
};
struct TreeNode* createNode(int value){
struct TreeNode* node=(struct TreeNode*)malloc(sizeof(struct TreeNode));
node->data=value;
node->left=node->right=NULL;
return node;
}
void insert(int value){

}
void preorder(struct TreeNode* root){
    if(root!=NULL){
        printf("%d",root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
void inorder(struct TreeNode*root){
    if(root!=NULL){
    inorder(root->left);
    printf("%d",root->data);
   inorder(root->right);
    }
}
void postorder(struct TreeNode* root){
    if(root!=NULL){
        postorder(root->left);
       postorder(root->right);
       printf("%d",root->data);
} }

void levelorder(struct TreeNode*root){
    
}

int  search(int root, int value){
    
}

void delete(int root,int value){
    
}
int main(){
    
    int n,choice,index,target,pos;
   while(1){
    printf("1. Insert\n");
    printf("2. Pre-Order\n");
    printf("3. In-Order\n");
    printf("4. Post-order\n");
    printf("5. Level Order\n");
    printf("6.Search\n");
    printf("7.Delete\n");
    printf("8.Exit\n");
    printf("Enter Choice");
    scanf("%d",&choice);
  switch(choice){
    case 1:
    printf("Enter the value of N : ");
    scanf("%d",&n);
    insert(n);
    break;
    case 2:
    printf("\n Pre-Order: ");
    preorder(0);
    break;
    case 3:
    printf("\n In-Order: ");
    inorder(0);
    break;
    case 4:
    printf("\n Post-Order: ");
    postorder(0);
    break;
    case 5:
    printf("\n Post-Order: ");
    postorder(0);
    break;
    case 6:
  printf("Enter Target");
 scanf("%d",&target);
 pos = search(target);
     if(pos == -1)
     printf("Element not found\n");
     else
     printf("Element found at index %d\n", pos);
         break;
        case 7:
            printf("Enter element to delete:");
            scanf("%d",&target);
            delete(target);
            break;

  case 8:
        exit(0);
         break;
         default:
      printf("Invalid Choice !!!!\n");
        }
        printf("\n");
        system("pause"); // without pressing system will not work
 }
return 0;
}
