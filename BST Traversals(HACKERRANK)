#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
// if null condition not given then go for dynamic
struct TreeNode{
    struct TreeNode* left;
    int data;
    struct TreeNode* right;
};
struct TreeNode* createNode(int value){
struct TreeNode* node=(struct TreeNode*)malloc(sizeof(struct TreeNode));
node->data=value;
node->left=node->right=NULL;
return node;
}

struct TreeNode* insert(struct TreeNode* root,int value){
if(root == NULL)
return createNode(value);
else if(value < root->data)
root->left=insert(root->left,value);
else if(value > root->data)
root->right=insert(root->right,value);
    return root;
}
void preorder(struct TreeNode* root){
    if(root!=NULL){
        printf("%d ",root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
void inorder(struct TreeNode* root){
if(root!=NULL){
   inorder(root->left);
    printf("%d ",root->data);
       inorder(root->right);
}
}
void postorder(struct TreeNode* root){
if(root!=NULL){
   postorder(root->left);
   postorder(root->right);
    printf("%d ",root->data);
}
}
int main(){
    struct TreeNode* root=NULL;
    int n,value;
    scanf("%d",&n);
    for(int i=0;i<n;i++){
        scanf("%d ",&value);
        root=insert(root,value);
    }
    preorder(root);
    printf("\n");
    inorder(root);
    printf("\n");
    postorder(root);
    return 0;
}
