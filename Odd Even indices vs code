#include <stdio.h>
#include <stdlib.h>

// Definition for singly-linked list.
struct ListNode {
    int val;
    struct ListNode *next;
};
struct ListNode* head=NULL;
// Function to create a new node with given value
struct ListNode* createNode(int val) {
    struct ListNode* newNode = (struct ListNode*) malloc(sizeof(struct ListNode));
    newNode->val = val;
    newNode->next = NULL;
    return newNode;
}

// Insert node at the end of the list
void insert( int val) {
    struct ListNode* newNode = createNode(val);
    if (head == NULL) {
        head = newNode;
        return;
    }
    struct ListNode* temp = head;
    while (temp->next != NULL)
        temp = temp->next;
    temp->next = newNode;
}
void display( struct ListNode* head){
   if(head==NULL)
   printf("List is empty !!!\n");
   else{
      printf("Elements are : \n");
      struct ListNode* temp=head;
      while(temp!=NULL){
         printf("%d ",temp->val);
         temp=temp->next;
      }
}
}
// Your pairSum function as requested
struct ListNode* oddeven(struct ListNode* head) {
    if(head==NULL || head->next==NULL)
    return head;
    else{
       struct ListNode*prev=head;
        struct ListNode* current=head->next;
          struct ListNode* head1=current;
        while(current!=NULL && current ->next!=NULL){
            prev->next=current->next;
            prev=prev->next;
            current->next=prev->next;
            current=current->next;
        }
        prev->next=head1;
        return head;
    }}
// Simple driver to test
int main() {
    //struct ListNode* head = NULL;
    int n, val;

    printf("Enter number of nodes: ");
    scanf("%d", &n);

    printf("Enter %d node values:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &val);
        insert(val);
    }

    struct ListNode* result = oddeven(head);
    display(result);
    

    // Free the linked list
   // struct ListNode* temp;
    //while (head) {
      //  temp = head;
       // head = head->next;
       // free(temp);
   // }

    return 0;
}
