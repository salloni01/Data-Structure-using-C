#include <stdio.h>
#include <stdlib.h>

// Definition for singly-linked list.
struct ListNode {
    int val;
    struct ListNode *next;
};
struct ListNode* head=NULL;
// Function to create a new node with given value
struct ListNode* createNode(int val) {
    struct ListNode* newNode = (struct ListNode*) malloc(sizeof(struct ListNode));
    newNode->val = val;
    newNode->next = NULL;
    return newNode;
}

// Insert node at the end of the list
void insert(struct ListNode** head, int val) {
    struct ListNode* newNode = createNode(val);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct ListNode* temp = *head;
    while (temp->next != NULL)
        temp = temp->next;
    temp->next = newNode;
}

// Your pairSum function as requested
int pairSum(struct ListNode* head) {
    int n = 0;
    struct ListNode* temp = head;
    // Count nodes
    while (temp) {
        n++;
        temp = temp->next;
    }
    // Store values in array
    int* arr = (int*)malloc(n * sizeof(int));
    temp = head;
    for (int i = 0; i < n; i++, temp = temp->next)
        arr[i] = temp->val;
    // Compute twin sum
    int maxSum = 0;
    for (int i = 0; i < n / 2; i++) {
        int sum = arr[i] + arr[n - 1 - i];
        if (sum > maxSum)
            maxSum = sum;
    }
    free(arr);
    return maxSum;
}

// Simple driver to test
int main() {
    //struct ListNode* head = NULL;
    int n, val;

    printf("Enter number of nodes: ");
    scanf("%d", &n);

    printf("Enter %d node values:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &val);
        insert(&head, val);
    }

    int result = pairSum(head);
    printf("Maximum twin sum is %d\n", result);

    // Free the linked list
   // struct ListNode* temp;
    //while (head) {
      //  temp = head;
       // head = head->next;
       // free(temp);
   // }

    return 0;
}
