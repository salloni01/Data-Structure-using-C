// Binary tree implementation using array.
#include<stdio.h>
#include<stdlib.h>
#define MAX 100
int tree[MAX];
 int size=0;  // actual number of elements
  void init(){
    for(int i =0;i<MAX;i++){
    tree[i]=-1;
    }
  }
    void insert(int n){ // how many nodes to be inserted
        for(int i=0;i<n;i++){
            scanf("%d",&tree[size++]);
        }
    }
    void preorder(int root){
        if(tree[root]==-1)
        return ;
        printf("%d ",tree[root]); //visit child
        preorder(2*root+1);//left child
        preorder(2*root+2); // right child
    }
    void inorder(int root){
        if(tree[root]==-1)
        return ;
       
        inorder(2*root+1);//left child
        printf("%d ",tree[root]);
        inorder(2*root+2); // right child
    }
    void postorder(int root){
        if(tree[root]==-1)
        return ;
       
        postorder(2*root+1);//left child
        postorder(2*root+2); // right child
        printf("%d ",tree[root]);
       
    }
    int search(int target){
        for(int i=0;i<size;i++){
            if(tree[i]==target){
                return i;
            }
        }
        return -1;
    }
    void delete(int target){
        int i=search(target);
        if(i==-1)
        printf("Not Found");
        else{
            tree[i]=tree[size-1];// replacing last node with element to be deleted
            tree[size-1]=-1;
            size--;
            printf("Element deleted!!!\n");
        }
    }
    
int main(){
    init();
    int n,choice,index,target,pos;
   while(1){
    printf("1. Insert\n");
    printf("2. Preorder\n");
    printf("3. Inorder\n");
    printf("4. Postorder\n");
    printf("5.Search\n");
    printf("6.Delete\n");
    printf("7.Exit\n");
    printf("Enter Choice");
    scanf("%d",&choice);
  switch(choice){
    case 1:
    printf("Enter the value of N : ");
    scanf("%d",&n);
    insert(n);
    break;
    case 2:
    printf("\n Pre-Order: ");
    preorder(0);
    break;
    case 3:
    printf("\n In-Order: ");
    inorder(0);
    break;
    case 4:
    printf("\n Post-Order: ");
    postorder(0);
    break;
    case 5:
  printf("Enter Target");
 scanf("%d",&target);
 pos = search(target);
     if(pos == -1)
     printf("Element not found\n");
     else
     printf("Element found at index %d\n", pos);
         break;
        case 6:
            printf("Enter element to delete:");
            scanf("%d",&target);
            delete(target);
            break;

  case 7:
        exit(0);
         break;
         default:
      printf("Invalid Choice !!!!\n");
        }
        printf("\n");
        system("pause"); // without pressing system will not work
 }
return 0;
}
